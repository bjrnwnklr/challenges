'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

###### this is a brute force implementation. 
# it does not calculate beyond 320 divisors (n = 2079) in a reasonable time


def factors(n):
    return [i for i in range(1, n // 2 + 1) if n % i == 0] + [n]

# triangular numbers are calculated:
# T(n) = (n * (n + 1)) / 2

def triangular(n):
    return (n * (n + 1)) // 2

n = 100
m = 0
while True:
    x = triangular(n)
    z = factors(x)
    if m < len(z):
        m = len(z)
        print(m, n, x)
    #print('n = %d, T(n) = %d, factors = %d' % (n, x, len(factors(x))))
    n += 1